name: CI/CD Pipeline

on:
  push:
    branches:
      - '*'

jobs:
  test:
    name: Run Tests and Lint
    runs-on: ubuntu-latest
    env:
      UVICORN_HOST: ${{ secrets.UVICORN_HOST }}
      UVICORN_PORT: ${{ secrets.UVICORN_PORT }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      SECRET: ${{ secrets.SECRET }}
      DOMAIN: ${{ secrets.DOMAIN }}
      API_AUDIENCE: ${{ secrets.API_AUDIENCE }}
      ISSUER: ${{ secrets.ISSUER }}

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Ruff linter
        run: |
          ruff format .

      - name: Run Tests
        run: |
          pytest app/tests

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create SSH Key File
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > "${{ runner.temp }}/ec2_key.pem"
          chmod 600 "${{ runner.temp }}/ec2_key.pem"

      - name: Copy Project to EC2 with rsync
        run: |
          rsync -av --delete -e "ssh -o StrictHostKeyChecking=no -i '${{ runner.temp }}/ec2_key.pem'" ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/fastapi/

      - name: Create .env file on EC2 instance
        run: |
          ssh -o StrictHostKeyChecking=no -i "${{ runner.temp }}/ec2_key.pem" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cat <<EOT > /home/ec2-user/fastapi/.env
            UVICORN_HOST=${{ secrets.UVICORN_HOST }}
            UVICORN_PORT=${{ secrets.UVICORN_PORT }}
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            SECRET=${{ secrets.SECRET }}
            ALGORITHM=${{ secrets.ALGORITHM }}
            DOMAIN=${{ secrets.DOMAIN }}
            API_AUDIENCE=${{ secrets.API_AUDIENCE }}
            ISSUER=${{ secrets.ISSUER }}
            EOT
          EOF

      - name: Run Application on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i "${{ runner.temp }}/ec2_key.pem" ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ec2-user/fastapi
          
            # Check if Uvicorn is running and stop it if it is
            if sudo lsof -i :8002; then
                echo "Stopping the existing Uvicorn server..."
                sudo kill $(sudo lsof -t -i:8002) || true
            fi
          
            echo "Starting the new version of the application..."
            chmod +x start_application.sh
            nohup ./start_application.sh > app.log 2>&1 &

            sleep 5
          
            done
          EOF

      - name: Cleanup SSH Key
        run: |
          rm "${{ runner.temp }}/ec2_key.pem"
