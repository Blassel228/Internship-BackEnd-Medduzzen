name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - BE-20-add-github-actions
      - develop

jobs:
  test-and-deploy:
    name: Test, Lint, Build, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          ref: BE-20-add-github-actions

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black code formatter
        run: |
          black .

      - name: Set environment variables
        run: |
          echo "UVICORN_HOST=${{ secrets.UVICORN_HOST }}" >> $GITHUB_ENV
          echo "UVICORN_PORT=${{ secrets.UVICORN_PORT }}" >> $GITHUB_ENV
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> $GITHUB_ENV
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> $GITHUB_ENV
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> $GITHUB_ENV
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> $GITHUB_ENV
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> $GITHUB_ENV
          echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> $GITHUB_ENV
          echo "SECRET=${{ secrets.SECRET }}" >> $GITHUB_ENV
          echo "DOMAIN=${{ secrets.DOMAIN }}" >> $GITHUB_ENV
          echo "API_AUDIENCE=${{ secrets.API_AUDIENCE }}" >> $GITHUB_ENV
          echo "ISSUER=${{ secrets.ISSUER }}" >> $GITHUB_ENV

      - name: Run Tests
        run: |
          pytest app/tests

      - name: Create SSH Key File
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Copy Project to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ec2_key.pem -r ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/fastapi

      - name: Start Celery on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "bash /home/ec2-user/fastapi/start_celery.sh"

      - name: Cleanup SSH Key
        run: |
          rm ec2_key.pem
